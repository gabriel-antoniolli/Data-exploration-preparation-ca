getwd()
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
print(results.mean)
results.mean <- mean(x)
print(results.mean)
install.packages("mosaic")
library("mosaic")
print(result.mean)
results.mean <- mean(x)
print(results.mean)
results.mean <- mean(x,trim = 0.3)
print(result.mean)
results.mean <- mean(x)
print(results.mean)
results.mean <- mean(x,trim = 0.3)
print(results.mean)
results.mean <- mean(x)
print(results.mean)
results.mean <- mean(x,na.rm = TRUE)
print(results.mean)
median.result <- median(x)
print(median.result)
#create the function
getmode <- function(v){
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#create the vector with numbers
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# calculate the mode using the user function
result <- getmode(v)
print(result)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Standard Deviation.
result.sd <- sd(x)
print(result.sd)
arbuthnot = read.table("arbuthnot.dat", header=TRUE)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
View(arbuthnot)
arbuthnot$boys
arbuthnot[56,3]
arbuthnot[1:10,3]
1:10
arbuthnot[1:10,]
arbuthnot[,3]
arbuthnot$girls[56]
arbuthnot$girls[1:10]
qplot(year, girls, data=arbuthnot)
qplot(year, girls, data=arbuthnot, geom = "line")
qplot(year, girls, data=arbuthnot, geom = "line", ylab="Number of Baby Girls Baptized", xlab
="Year")
5218 / 4683
arbuthnot$boys/arbuthnot$girls
with(arbuthnot, boys/ girls)
qplot(year, boys / girls, data=arbuthnot, geom = "line", ylab="Boys/Girls Ratio")
5218 / (4683+5218)
with(arbuthnot, boys/(boys + girls))
qplot(year, boys/(boys + girls), data=arbuthnot, geom = "line", ylab="Proportion of Boys")
present <- read.table("present.dat", header=TRUE)
View(present)
present$year
dim(present)
names(present)
library(tidyverse)
library(devtools)
install.packages('devtools')
library(devtools)
install_github('ggobi/ggally')
install.packages('GGally')
install.packages("GGally")
library(GGally)
data(flea)
fleaTib <- as_tibble(flea)
fleaTib
# Load the CSV file into a dataframe
file_path <- 'full_grouped.csv'
df <- read.csv(file_path)
setwd("C:/Users/gabri/Downloads/Studies/cct/7 semester/AI/CA/Data-exploration-preparation-ca")
df <- read.csv(file_path)
# Display
head(df)
library(ggplot2)
count(categorical)
# Assuming your data frame is named 'covid_data'
# Convert the 'Date' column to a Date object
covid_data$Date <- as.Date(covid_data$Date)
covid_data <- read.csv('full_grouped.csv', header = TRUE)
# Assuming your data frame is named 'covid_data'
# Convert the 'Date' column to a Date object
covid_data$Date <- as.Date(covid_data$Date)
# Plotting time series of Confirmed cases
plot(covid_data$Date, covid_data$Confirmed, type = "l", col = "blue",
xlab = "Date", ylab = "Confirmed Cases",
main = "COVID-19 Confirmed Cases Over Time")
#visualisation of categorical
barplot(table(covid_data$Country/Region), col = "skyblue", main = "Country/Region Distribution")
#visualisation of categorical
barplot(table(covid_data$[[Country/Region]]), col = "skyblue", main = "Country/Region Distribution")
#visualisation of categorical
barplot(table(covid_data[[Country/Region]]), col = "skyblue", main = "Country/Region Distribution")
# importing data frame
covid_data <- read.csv('full_grouped.csv', header = TRUE)
#visualisation of categorical
barplot(table(covid_data[[Country/Region]]), col = "skyblue", main = "Country/Region Distribution")
#visualisation of categorical
barplot(table(covid_data[["Country/Region"]]), col = "skyblue", main = "Country/Region Distribution")
# Check for missing or infinite values in the "Country/Region" column
country_region_values <- covid_data[["Country/Region"]]
print(summary(country_region_values))
# Check for NAs
print(sum(is.na(country_region_values)))
# Check for infinite values
print(sum(!is.finite(country_region_values)))
unique_countries <- unique(covid_data[["Country/Region"]])
print(unique_countries)
# Check unique values in the "Country/Region" column
unique_countries <- unique(covid_data$`Country/Region`)
print(unique_countries)
str(covid_data)
#visualisation of categorical
barplot(table(covid_data$Country.Region), col = "skyblue", main = "Country/Region Distribution")
country_counts <- table(covid_data$Country.Region)
# Sort countries by count in descending order
sorted_countries <- names(country_counts[order(-country_counts)])
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:20]], col = "skyblue", horiz = TRUE,
main = "Top 20 Countries by Count", cex.names = 0.7)
country_counts <- table(covid_data$Country.Region)
# Sort countries by count in descending order
sorted_countries <- names(country_counts[order(-country_counts)])
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:10]], col = "skyblue", horiz = TRUE,
main = "Top 20 Countries by Count", cex.names = 0.7)
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:5]], col = "skyblue", horiz = TRUE,
main = "Top 20 Countries by Count", cex.names = 0.7)
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue", horiz = TRUE,
main = "Top 20 Countries by Count", cex.names = 0.7)
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "Top 20 Countries by Count", cex.names = 0.7)
# Sort countries by count in descending order
sorted_countries <- names(country_counts[order(-country_counts)])
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "First 4 countries", cex.names = 0.7
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
# Convert the 'Date' column to a Date object
covid_data$Date <- as.Date(covid_data$Date)
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "First 4 countries", cex.names = 0.7
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
# Sort countries by count in descending order
sorted_countries <- names(country_counts[order(-country_counts)])
# Create a horizontal bar plot for the top N countries (e.g., top 20)
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "First 4 countries", cex.names = 0.7)
str(covid_data)
barplot(table(covid_data$WHO.Region), col = "lightgreen", main = "WHO Region Distribution")
barplot(table(covid_data$WHO.Region),cex,names= 0.7, col = "lightgreen", main = "WHO Region Distribution")
barplot(table(covid_data$WHO.Region),cex.names= 0.7, col = "lightgreen", main = "WHO Region Distribution")
barplot(table(covid_data$WHO.Region),cex.names= 0.7, las=2, col = "lightgreen", main = "WHO Region Distribution")
sorted_countries <- names(country_counts[order(-country_counts)])
# Creating bar plot for the first 4 countries, for demonstration of data type
barplot(country_counts[sorted_countrie
sorted_countries <- names(country_counts[order(-country_counts)])
# Creating bar plot for the first 4 countries, for demonstration of data type
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "First 4 countries", cex.names = 0.7)
# Creating bar plot for the first 4 countries, for demonstration of data type
barplot(country_counts[sorted_countries[1:4]], col = "skyblue",
main = "First 4 countries", las= 2, cex.names = 0.7)
# Creating bar plot for the first 4 countries, for demonstration of data type
barplot(country_counts[sorted_countries[1:10]], col = "skyblue",
main = "First 4 countries", las= 2, cex.names = 0.7)
# Assuming your data frame is named 'covid_data'
par(mfrow=c(2, 4))  # Arrange plots in a 2x4 grid
# Loop through each discrete variable
for (variable in c("Confirmed", "Deaths", "Recovered", "Active", "New cases", "New deaths", "New recovered")) {
barplot(table(covid_data[[variable]]), col = "orange", main = paste(variable, "Distribution"))
for (variable in c("Confirmed", "Deaths", "Recovered", "Active", "New cases", "New deaths", "New recovered")) {
barplot(table(covid_data[[variable]]), col = "orange", main = paste(variable, "Distribution"))
}
getwd()
